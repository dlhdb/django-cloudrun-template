"""
Django settings for project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
from urllib.parse import urlparse

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# load secrets to environment variables
env_file = os.path.join(BASE_DIR, ".env")
if os.path.isfile(env_file):
    # Use a local secret file, if provided
    load_dotenv(env_file)
# elif os.environ.get("GOOGLE_CLOUD_PROJECT", None):
#     # Pull secrets from Secret Manager
#     _, project_id = google.auth.default()
#
#     client = secretmanager.SecretManagerServiceClient()
#     secret_name = "oauth-env"
#     name = f"projects/{project_id}/secrets/{secret_name}/versions/latest"
#     payload = client.access_secret_version(name=name).payload.data.decode("UTF-8")
#
#     load_dotenv(stream=io.StringIO(payload))
# else:
#     raise Exception("No local .env or GOOGLE_CLOUD_PROJECT detected. No secrets found.")

DEV_ENV = os.environ.get("DEV_ENV", None)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-yq@g4r-wdy5&byp88ox=piyczt1uqcy*pxaly2j$6cqm(z5o=b'

# [START cloudrun_django_csrf]
# SECURITY WARNING: It's recommended that you use this when
# running in production. The URL will be known once you first deploy
# to Cloud Run. This code takes the URL and converts it to both these settings formats.
if DEV_ENV:
    ALLOWED_HOSTS = ["*"]
else:
    CLOUDRUN_SERVICE_URL = os.environ.get("CLOUDRUN_SERVICE_URL", None)
    if not CLOUDRUN_SERVICE_URL:
        raise Exception("CLOUDRUN_SERVICE_URL not set")
    ALLOWED_HOSTS = [urlparse(CLOUDRUN_SERVICE_URL).netloc]
    CSRF_TRUSTED_ORIGINS = [CLOUDRUN_SERVICE_URL]
    # redirect all http to https
    SECURE_SSL_REDIRECT = True
    # set this to avoid infinite redirects
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
# [END cloudrun_django_csrf]

# SECURITY WARNING: don't run with debug turned on in production!
# if DEV_ENV:
#     DEBUG = True

# CORS settings
CORS_ORIGIN_ALLOW_ALL = False
CORS_ALLOWED_ORIGIN_REGEXES = [
    r"^http://localhost:[\d]+$",
    r"^http://127.0.0.1:[\d]+$",
]
CORS_ALLOW_HEADERS = [
    "Content-Type",
    "Authorization",
    'X-API-KEY',
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'apps.myapp',
]

MIDDLEWARE = [
    'djproject.middlewares.request_id.request_id_middleware',
    'djproject.middlewares.log_req_res.log_req_res_middleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'djproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

if not DEV_ENV:
    WSGI_APPLICATION = 'djproject.wsgi.application'
    ASGI_APPLICATION = "djproject.asgi.application"

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Logging
logging_format = '%(requestId)s | %(levelname)s | %(module)s | %(funcName)s | %(message)s'
if DEV_ENV:
    logging_format = '%(asctime)s | ' + logging_format

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    'formatters': {
        'standard': {
            'format': logging_format
        },
    },

    'filters': {
        'log_request_id': {
            '()': 'djproject.log_filters.base_filter.RequestIDFilter'
        },
    },

    "handlers": {
        'default': {
            "class": "logging.StreamHandler",
            "level": "DEBUG",
            "formatter": "standard",
            'filters': ['log_request_id'],
        }
    },

    'root': {
        'handlers': ['default'],
        'level': 'INFO'
    },

    'loggers': {
        'django.request': {
            'handlers': ['default'],
            'level': 'DEBUG',
            'propagate': False
        },
        'asyncio': {
            'handlers': ['default'],
            'level': 'WARNING',
            'propagate': False
        },
    }
}
